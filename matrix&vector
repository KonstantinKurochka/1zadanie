#include <iostream>
using namespace std;

class Vector2D
{
public:
    float x, y;
    Vector2D();
	Vector2D(float a, float b);
	float getX();
	float getY();
	void setX(float a);
    void setY(float b);
    Vector2D add (Vector2D b);
    Vector2D subtract (Vector2D b);
    Vector2D multiply (int b);
    Vector2D scalar (Vector2D b);
    void print (Vector2D v);
};

Vector2D::Vector2D() {}

Vector2D::Vector2D(float a, float b)
{
    x = a;
    y = b;
}

float Vector2D::getX ()
{
    return this->x;
}

float Vector2D::getY ()
{
    return this->y;
}

void Vector2D::setX (float a)
{
    this->x = a;
}

void Vector2D::setY (float b)
{
    this->y = b;
}

Vector2D Vector2D::add (Vector2D b)
{
    Vector2D v;
    v.x = this->x + b.x;
    v.y = this->y + b.y;
    return v;
}

Vector2D Vector2D::subtract(Vector2D b)
{
    Vector2D v;
    v.x = this->x - b.x;
    v.y = this->y - b.y;
    return v;
}

Vector2D Vector2D::multiply(int b)
{
    Vector2D v;
    v.x = this->x * b;
    v.y = this->y * b;
    return v;
}

Vector2D Vector2D::scalar (Vector2D b)
{
    Vector2D v;
    v.x = this->x * b.x;
    v.y = this->x * b.y;
    return v;
}
void Vector2D::print(Vector2D v)
{
    cout << "[" << v.x << ", " << v.y << "]";
}

#include <iostream>
using namespace std;

class Matrix2D
{
public:
    float a, b, c, d;
    Matrix2D();
	Matrix2D(float A, float B, float C, float D);
	float getA();
	float getB();
	float getC();
	float getD();
	void setA(float A);
    void setB(float B);
    void setC(float C);
    void setD(float D);
    Matrix2D add (Matrix2D m);
    Matrix2D subtract (Matrix2D m);
    Matrix2D multiply (float n);
    Matrix2D matrix_multiply (Matrix2D m);
    Vector2D vector_multiply (Vector2D v);
    float determinant ();
    void print (Matrix2D m);

private:
	float x_x, y_y;
};

Matrix2D::Matrix2D() {}

Matrix2D::Matrix2D(float A, float B, float C, float D)
{
    a = A;
    b = B;
    c = C;
    d = D;
}

float Matrix2D::getA ()
{
    return this->a;
}

float Matrix2D::getB ()
{
    return this->b;
}

float Matrix2D::getC ()
{
    return this->c;
}

float Matrix2D::getD ()
{
    return this->d;
}

void Matrix2D::setA (float A)
{
    this->a = A;
}

void Matrix2D::setB (float B)
{
    this->b = B;
}

void Matrix2D::setC (float C)
{
    this->c = C;
}

void Matrix2D::setD (float D)
{
    this->d = D;
}

Matrix2D Matrix2D::add (Matrix2D m)
{
    Matrix2D v;
    v.a = this->a + m.a;
    v.b = this->b + m.b;
    v.c = this->c + m.c;
    v.d = this->d + m.d;
    return v;
}

Matrix2D Matrix2D::subtract(Matrix2D m)
{
    Matrix2D v;
    v.a = this->a - m.a;
    v.b = this->b - m.b;
    v.c = this->c - m.c;
    v.d = this->d - m.d;
    return v;
}

Matrix2D Matrix2D::multiply(float n)
{
    Matrix2D v;
    v.a = this->a * n;
    v.b = this->b * n;
    v.c = this->c * n;
    v.d = this->d * n;
    return v;
}

Matrix2D Matrix2D::matrix_multiply(Matrix2D m)
{
    Matrix2D v;
    v.a = this->a * m.a + this->b * m.c;
    v.b = this->a * m.b + this->b * m.d;
    v.c = this->c * m.a + this->d * m.c;
    v.d = this->c * m.b + this->d * m.d;
    return v;
}

Vector2D Matrix2D::vector_multiply(Vector2D v)
{
    Vector2D m;
    m.x = this->a * v.x + this->b * v.y;
    m.y = this->c * v.x + this->d * v.y;
    return m;
}

void Matrix2D::print(Matrix2D v)
{
    cout << "||" << v.a << " " << v.b << "||" << endl << "||" << v.c << " " << v.d << "||";
}

float Matrix2D::determinant()
{
    return this->a * this -> d - this->b * this->c;
}


main ()
{
    Vector2D A, B;
    int num = 5;
    A.setX(1);
    A.setY(1);
    B.setX(2);
    B.setY(3);
    cout << A.getX() << " " << A.getY() << " " << B.getX() << " " << B.getY() << endl;
    A.setX(4);
    B.setY(6);
    (A.add(B)).print(A.add(B));
    (A.subtract(B)).print(A.subtract(B));
    (B.subtract(A)).print(B.subtract(A));
    cout << endl << "Dot product of A & B: ";
    (A.scalar(B)).print(A.scalar(B));

    Matrix2D A1, B1;
    A1.setA(1);
    A1.setB(1);
    A1.setC(2);
    A1.setD(3);
    B1.setA(4);
    B1.setB(5);
    B1.setC(6);
    B1.setD(3);

    A1.print(A1);

    A1.setA(4);
    B1.setB(6);
    (A1.add(B1)).print(A1.add(B1));
    (A1.subtract(B1)).print(A1.subtract(B1));
    (B1.subtract(A1)).print(B1.subtract(A1));
    cout << endl << "Multiplication of A1 & B1: ";
    (A1.matrix_multiply(B1)).print(A1.matrix_multiply(B1));
    cout << endl << A1.determinant () << " " << B1.determinant ();
}
